<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hardware security modules on Security365 Docs</title><link>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/</link><description>Recent content in Hardware security modules on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration</title><link>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/configuration/</guid><description>Configuration ImportantCarefully review the manufacturer documentation for your HSM and properly restrict access to the key server. To get started with your PKCS#11 token you will need to initialize it with a private key, PIN, and token label. The instructions to do this will be specific to each hardware device, and you should follow the instructions provided by your vendor. You will also need to find the path to your module, a shared object file (.</description></item><item><title>AWS cloud HSM</title><link>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/aws-cloud-hsm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/aws-cloud-hsm/</guid><description>AWS cloud HSM NoteThis example imports an existing key pair, but you may prefer to generate your key on the HSM External link icon Open external link .
&amp;#8203;​ Before you start Make sure you have:
Provisioned an AWS CloudHSM cluster External link icon Open external link . Installed the appropriate software library for PKCS#11 External link icon Open external link . &amp;#8203;​ 1. Import the public and private key to the HSM Before importing the public key, extract it from the certificate provided by your CA.</description></item><item><title>Azure Dedicated HSM</title><link>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/azure-dedicated-hsm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/azure-dedicated-hsm/</guid><description>Azure Dedicated HSMThis tutorial uses Azure Dedicated HSM External link icon Open external link — a FIPS 140-2 Level 3 certified implementation based on the Gemalto SafeNet Luna a790.
&amp;#8203;​ Before you start Make sure you have:
Followed Microsoft&amp;rsquo;s tutorial External link icon Open external link for deploying HSMs into an existing virtual network using Powershell Installed the SafeNet client software External link icon Open external link &amp;#8203;​ 1. Create, assign, and initialize a new partition The first step is creating an HSM partition, which can be thought of as an independent logical HSM within your Azure Dedicated HSM device.</description></item><item><title>Azure Managed HSM</title><link>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/azure-managed-hsm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/azure-managed-hsm/</guid><description>Azure Managed HSMThis tutorial uses Microsoft Azure’s Managed HSM External link icon Open external link — a FIPS 140-2 Level 3 certified implementation — to deploy a VM with the Keyless SSL daemon.
&amp;#8203;​ Before you start Make sure you have:
Followed Microsoft&amp;rsquo;s tutorial External link icon Open external link for provisioning and activating the managed HSM Set up a VM for your key server &amp;#8203;​ 1. Create a VM Create a VM where you will deploy the keyless daemon.</description></item><item><title>SoftHSMv2</title><link>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/softhsmv2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/softhsmv2/</guid><description>SoftHSMv2 ImportantSoftHSMv2 should not be considered any more secure than storing private keys directly on disk. No attempt is made below to secure this installation; it is provided simply for demonstration purposes. &amp;#8203;​ 1. Install and configure SoftHSMv2 First, we install SoftHSMv2 and configure it to store tokens in the default location /var/lib/softhsm/tokens. We also need to give the softhsm group permission to this directory as this is how the keyless user will access this directory.</description></item><item><title>Entrust nShield Connect</title><link>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/entrust-nshield-connect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/entrust-nshield-connect/</guid><description>Entrust nShield Connect NoteThis example assumes you have already configured the nShield Connect device and generated or imported your private keys. Since the keys are already in place, we merely need to build the configuration file that the key server will read on startup. In this example the device contains a single RSA key pair.
We ask pkcs11-tool (provided by the opensc package) to display the objects stored in the token:</description></item><item><title>IBM cloud HSM</title><link>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/ibm-cloud-hsm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/ibm-cloud-hsm/</guid><description>IBM cloud HSMThe example below was tested using IBM Cloud HSM 7.0 External link icon Open external link , a FIPS 140-2 Level 3 certified implementation based on the Gemalto SafeNet Luna a750.
&amp;#8203;​ Before you start Make sure that you have:
Initialized your device External link icon Open external link Installed the SafeNet client software External link icon Open external link &amp;#8203;​ 1. Create, assign, and initialize a new partition The first step is creating an HSM partition, which can be thought of as an independent logical HSM within your IBM Cloud HSM device.</description></item><item><title>Google Cloud HSM</title><link>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/google-cloud-hsm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/ssl/keyless-ssl/hardware-security-modules/google-cloud-hsm/</guid><description>Google Cloud HSMThis tutorial uses Google Cloud HSM External link icon Open external link — a FIPS 140-2 Level 3 certified implementation.
&amp;#8203;​ Before you start Make sure that you have:
Set up your Google Cloud project External link icon Open external link &amp;#8203;​ 1. Create a key ring To set up the Google Cloud HSM, create a key ring External link icon Open external link and indicate its location.</description></item></channel></rss>