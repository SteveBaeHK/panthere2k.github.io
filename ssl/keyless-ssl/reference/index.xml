<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reference on Security365 Docs</title><link>https://panthere2k.github.io/ssl/keyless-ssl/reference/</link><description>Recent content in Reference on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/ssl/keyless-ssl/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>High availability</title><link>https://panthere2k.github.io/ssl/keyless-ssl/reference/high-availability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/ssl/keyless-ssl/reference/high-availability/</guid><description>High availabilityThe Cloudflare Keyless SSL server runs as a single binary with minimal dependencies and is designed to be robust and reliable. The network between your key server and Cloudflare may not be however, which could prevent new TLS connections.
For this reason, we strongly recommend that you run at least two key servers in a high availability configuration behind a load balancer. Set up health checks for each key server on the configured TCP port—2407 by default and failover as necessary or round-robin between active (healthy) key servers.</description></item><item><title>Scaling and benchmarking</title><link>https://panthere2k.github.io/ssl/keyless-ssl/reference/scaling-and-benchmarking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/ssl/keyless-ssl/reference/scaling-and-benchmarking/</guid><description>Scaling and benchmarkingCloudflare’s Keyless SSL technology was designed to scale to accommodate any sized workload using vertical and horizontal scaling, and pre-computation techniques wherever possible, such as ECDSA. The goals of the architectural design of the key server are to minimize latency while maximizing signing operations per second.
Each key server uses a worker pool model, with incoming client connections handled by its own pair of reader/writer goroutines and cryptographic work done in separate worker goroutines pulled from a a global pool.</description></item><item><title>Keyless delegation</title><link>https://panthere2k.github.io/ssl/keyless-ssl/reference/keyless-delegation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/ssl/keyless-ssl/reference/keyless-delegation/</guid><description>Keyless delegationKeyless Delegation is our implementation of the emerging delegated credentials standard External link icon Open external link . When you upload a certificate for use with Keyless that has the special extension permitting the use of delegated credentials, Cloudflare will automatically produce a delegated credential and use it at the edge with clients that support this feature. The handshakes will complete without the extra latency induced by reaching back to the Keyless Server, and there are additional advantages to flexibility in algorithm choice External link icon Open external link .</description></item></channel></rss>