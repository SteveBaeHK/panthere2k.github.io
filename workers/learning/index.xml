<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learning on Security365 Docs</title><link>https://panthere2k.github.io/workers/learning/</link><description>Recent content in Learning on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/workers/learning/index.xml" rel="self" type="application/rss+xml"/><item><title>How Workers works</title><link>https://panthere2k.github.io/workers/learning/how-workers-works/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/learning/how-workers-works/</guid><description>How Workers worksThough Cloudflare Workers behave similarly to JavaScript External link icon Open external link in the browser or in Node.js, there are a few differences in how you have to think about your code. Under the hood, the Workers runtime uses the V8 engine External link icon Open external link — the same engine used by Chromium and Node.js. The Workers runtime also implements many of the standard APIs available in most modern browsers.</description></item><item><title>Security model</title><link>https://panthere2k.github.io/workers/learning/security-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/learning/security-model/</guid><description>Security modelThis article includes an overview of Cloudflare security architecture, and then addresses two frequently asked about issues: V8 bugs and Spectre.
Since the very start of the Workers project, security has been a high priority — there was a concern early on that when hosting a large number of tenants on shared infrastructure, side channels of various kinds would pose a threat. The Cloudflare Workers runtime is carefully designed to defend against side channel attacks.</description></item><item><title>Debugging Workers</title><link>https://panthere2k.github.io/workers/learning/debugging-workers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/learning/debugging-workers/</guid><description>Debugging WorkersDebugging is a critical part of developing a new application — whether running code in the initial stages of development, or trying to understand an issue occurring in production. In this article, you will learn how to effectively debug your Workers application, as well as review some code samples to help you get started:
&amp;#8203;​ Local testing with wrangler dev When you are developing your Workers application, the wrangler dev command can significantly reduce the time it takes to test and debug new features.</description></item><item><title>Logging from Workers</title><link>https://panthere2k.github.io/workers/learning/logging-workers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/learning/logging-workers/</guid><description>Logging from WorkersYou can access logs and exceptions for your Workers using the dashboard or wrangler tail.
The Workers platform captures all console.log&amp;rsquo;s and uncaught exceptions, in addition to information about the event itself. All of this can be viewed with either wrangler tail or on the dashboard through your Account Home &amp;gt; Workers &amp;gt; your Workers script &amp;gt; Logs.
To push your Worker logs to a third-party provider, refer to Logpush.</description></item><item><title>Metrics and analytics</title><link>https://panthere2k.github.io/workers/learning/metrics-and-analytics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/learning/metrics-and-analytics/</guid><description>Metrics and analyticsThere are two graphical sources of information about your Workers traffic at a given time: Workers Metrics and zone-based Workers analytics. Workers metrics can help you diagnose issues and understand your Workers workloads by showing performance and usage of your Workers. If your Worker runs on a route on a zone, or on a few zones, go to Workers in your zone&amp;rsquo;s Cloudflare dashboard to understand on a per-zone basis how much traffic your Worker is handling, and how many requests your site is getting.</description></item><item><title>How the Cache works</title><link>https://panthere2k.github.io/workers/learning/how-the-cache-works/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/learning/how-the-cache-works/</guid><description>How the Cache worksWorkers was designed and built on top of Cloudflare&amp;rsquo;s edge network to allow developers to interact directly with the Cloudflare cache. The cache can provide ephemeral, data center-local storage, as a convenient way to frequently access static or dynamic content.
By allowing developers to write to the cache, Workers provide a way to customize cache behavior on Cloudflare’s CDN. To learn about the benefits of caching, refer to the Learning Center’s article on What is Caching?</description></item><item><title>How KV works</title><link>https://panthere2k.github.io/workers/learning/how-kv-works/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/learning/how-kv-works/</guid><description>How KV worksWorkers KV is a global, low-latency, key-value data store. It stores data in a small number of centralized data centers, then caches that data in Cloudflare&amp;rsquo;s data centers after access. KV supports exceptionally high read volumes with low latency, making it possible to build highly dynamic APIs and websites that respond as quickly as a cached static file would. While reads are periodically revalidated in the background, requests which are not in cache and need to hit the centralized back end can see high latencies.</description></item><item><title>How routing works</title><link>https://panthere2k.github.io/workers/learning/how-routing-works/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/learning/how-routing-works/</guid><description>How routing works &amp;#8203;​ Background To allow a Worker to receive inbound HTTP requests, you must connect it to an external endpoint such that it can be accessed by the Internet. There are two ways to route to a Worker:
Custom Domains. and
Routes. Routes add Workers functionality to your existing proxied hostnames, in front of your application server. These allow your Workers to act as a proxy and perform any necessary work before reaching out to an application server behind Cloudflare.</description></item><item><title>Migrating to module Workers</title><link>https://panthere2k.github.io/workers/learning/migrating-to-module-workers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/learning/migrating-to-module-workers/</guid><description>Migrating to module WorkersThis guide will show you how to migrate your Workers from the Service Worker External link icon Open external link syntax to the new Module Worker External link icon Open external link format.
&amp;#8203;​ Advantages of migrating There are several reasons you might want to migrate your Workers to the module syntax:
Durable Objects require the module syntax. Module Workers do not rely on any global bindings, which means the Workers runtime does not need to set up fresh execution contexts, making Module Workers safer and faster to run.</description></item><item><title>Using Service Worker syntax</title><link>https://panthere2k.github.io/workers/learning/service-worker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/learning/service-worker/</guid><description>Using Service Worker syntaxA Worker written in Service Worker syntax consists of two parts:
An event listener that listens for FetchEvents, and An event handler that returns a Response object which is passed to the event’s .respondWith() method. When a request is received on one of Cloudflare’s edge servers for a URL matching a Workers script, it passes the request to the Workers runtime. This dispatches a FetchEvent in the isolate where the script is running.</description></item></channel></rss>