<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Streams on Security365 Docs</title><link>https://panthere2k.github.io/workers/runtime-apis/streams/</link><description>Recent content in Streams on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/workers/runtime-apis/streams/index.xml" rel="self" type="application/rss+xml"/><item><title>ReadableStream</title><link>https://panthere2k.github.io/workers/runtime-apis/streams/readablestream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/runtime-apis/streams/readablestream/</guid><description>ReadableStream &amp;#8203;​ Background A ReadableStream is returned by the readable property inside TransformStream. On the Workers platform, ReadableStream cannot be created directly using the ReadableStream constructor.
&amp;#8203;​ Properties locked boolean A Boolean value that indicates if the readable stream is locked to a reader. &amp;#8203;​ Methods pipeTo(destinationWritableStream, optionsPipeToOptions) Promise&amp;lt;void&amp;gt;
Pipes the readable stream to a given writable stream destination and returns a promise that is fulfilled when the write operation succeeds or rejects it if the operation fails.</description></item><item><title>ReadableStream BYOBReader</title><link>https://panthere2k.github.io/workers/runtime-apis/streams/readablestreambyobreader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/runtime-apis/streams/readablestreambyobreader/</guid><description>ReadableStreamBYOBReader &amp;#8203;​ Background BYOB is an abbreviation of bring your own buffer. A ReadableStreamBYOBReader allows reading into a developer-supplied buffer, thus minimizing copies.
An instance of ReadableStreamBYOBReader is functionally identical to ReadableStreamDefaultReader with the exception of the read method.
A ReadableStreamBYOBReader is not instantiated via its constructor. Rather, it is retrieved from a ReadableStream:
const { readable, writable } = new TransformStream(); const reader = readable.getReader({ mode: &amp;#39;byob&amp;#39; }); &amp;#8203;​ Methods read(bufferArrayBufferView) Promise&amp;lt;ReadableStreamBYOBReadResult&amp;gt; Returns a promise with the next available chunk of data read into a passed-in buffer.</description></item><item><title>ReadableStream DefaultReader</title><link>https://panthere2k.github.io/workers/runtime-apis/streams/readablestreamdefaultreader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/runtime-apis/streams/readablestreamdefaultreader/</guid><description>ReadableStreamDefaultReader &amp;#8203;​ Background A reader is used when you want to read from a ReadableStream, rather than piping its output to a WritableStream.
A ReadableStreamDefaultReader is not instantiated via its constructor. Rather, it is retrieved from a ReadableStream:
const { readable, writable } = new TransformStream(); const reader = readable.getReader(); &amp;#8203;​ Properties closed Promise
A promise indicating if the reader is closed. The promise is fulfilled when the reader stream closes and is rejected if there is an error in the stream.</description></item><item><title>TransformStream</title><link>https://panthere2k.github.io/workers/runtime-apis/streams/transformstream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/runtime-apis/streams/transformstream/</guid><description>TransformStream &amp;#8203;​ Background A transform stream consists of a pair of streams: a writable stream, known as its writable side, and a readable stream, known as its readable side. Writes to the writable side result in new data being made available for reading from the readable side.
The Workers platform currently only implements an identity transform stream, a type of transform stream which forwards all chunks written to its writable side to its readable side, without any changes.</description></item><item><title>WritableStream</title><link>https://panthere2k.github.io/workers/runtime-apis/streams/writablestream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/runtime-apis/streams/writablestream/</guid><description>WritableStream &amp;#8203;​ Background A WritableStream is the writable property of a TransformStream. On the Workers platform, WritableStream cannot be directly created using the WritableStream constructor.
A typical way to write to a WritableStream is to simply pipe a ReadableStream to it.
readableStream .pipeTo(writableStream) .then(() =&amp;gt; console.log(&amp;#39;All data successfully written!&amp;#39;)) .catch(e =&amp;gt; console.error(&amp;#39;Something went wrong!&amp;#39;, e)); To write to a WritableStream directly, you must use its writer.
const writer = writableStream.</description></item><item><title>WritableStream DefaultWriter</title><link>https://panthere2k.github.io/workers/runtime-apis/streams/writablestreamdefaultwriter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/workers/runtime-apis/streams/writablestreamdefaultwriter/</guid><description>WritableStreamDefaultWriter &amp;#8203;​ Background A writer is used when you want to write directly to a WritableStream, rather than piping data to it from a ReadableStream. For example:
function writeArrayToStream(array, writableStream) { const writer = writableStream.getWriter(); array.forEach(chunk =&amp;gt; writer.write(chunk).catch(() =&amp;gt; {})); return writer.close(); } writeArrayToStream([1, 2, 3, 4, 5], writableStream) .then(() =&amp;gt; console.log(&amp;#39;All done!&amp;#39;)) .catch(e =&amp;gt; console.error(&amp;#39;Error with the stream: &amp;#39; + e)); &amp;#8203;​ Properties desiredSize int
The size needed to fill the stream’s internal queue, as an integer.</description></item></channel></rss>