<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Automated exposed credentials check on Security365 Docs</title><link>https://panthere2k.github.io/waf/exposed-credentials-check/</link><description>Recent content in Automated exposed credentials check on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/waf/exposed-credentials-check/index.xml" rel="self" type="application/rss+xml"/><item><title>How exposed credentials checks work</title><link>https://panthere2k.github.io/waf/exposed-credentials-check/how-checks-work/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/waf/exposed-credentials-check/how-checks-work/</guid><description>How exposed credentials checks workWAF rules can include a check for exposed credentials. When enabled in a given rule, exposed credentials checking happens when there is a match for the rule expression (that is, the rule expression evaluates to true).
At this point, the WAF looks up the username/password pair in the request against a database of publicly available stolen credentials. When both the rule expression and the exposed credentials check are true, there is a rule match, and Cloudflare performs the action configured in the rule.</description></item><item><title>Configure exposed credentials checks via API</title><link>https://panthere2k.github.io/waf/exposed-credentials-check/configure-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/waf/exposed-credentials-check/configure-api/</guid><description>Configure exposed credentials checks via APIConfigure exposed credentials checks using the Rulesets API. You can do the following:
Deploy the Cloudflare Exposed Credentials Check Managed Ruleset. Create custom rules that check for exposed credentials. &amp;#8203;​ Create a custom rule checking for exposed credentials This feature is only available to customers on an Enterprise plan. You can create rules that check for exposed credentials using the Rulesets API. Include these rules in a custom ruleset, which you must create at the account level, and then deploy the custom ruleset to a phase.</description></item><item><title>Test your exposed credentials checks configuration</title><link>https://panthere2k.github.io/waf/exposed-credentials-check/test-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/waf/exposed-credentials-check/test-configuration/</guid><description>Test your exposed credentials checks configurationAfter enabling and configuring exposed credentials checks, you may want to test if the checks are working properly.
Cloudflare provides a special set of credentials for this purpose:
Login: CF_EXPOSED_USERNAME or CF_EXPOSED_USERNAME@example.com Password: CF_EXPOSED_PASSWORD The WAF always considers these specific credentials as having been previously exposed. Use them to force an &amp;ldquo;exposed credentials&amp;rdquo; event, which allows you to check the behavior of your current configuration.</description></item><item><title>Monitor exposed credentials events</title><link>https://panthere2k.github.io/waf/exposed-credentials-check/monitor-events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/waf/exposed-credentials-check/monitor-events/</guid><description>Monitor exposed credentials eventsThe Activity log in Security Events shows entries for requests with exposed credentials identified by rules with the Log action.
Check for exposed credentials events in the Security Events dashboard (Security &amp;gt; Events tab), filtering by a specific Rule ID. For more information on filtering security events, refer to Adjusting displayed data.
ImportantExposed credentials events are only logged after you activate the Exposed Credentials Check Managed Ruleset or create a custom rule checking for exposed credentials.</description></item></channel></rss>