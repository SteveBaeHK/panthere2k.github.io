<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>How to on Security365 Docs</title><link>https://panthere2k.github.io/pages/how-to/</link><description>Recent content in How to on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/pages/how-to/index.xml" rel="self" type="application/rss+xml"/><item><title>Add a custom domain to a branch</title><link>https://panthere2k.github.io/pages/how-to/custom-branch-aliases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/how-to/custom-branch-aliases/</guid><description>Add a custom domain to a branchIn this guide, you will learn how to add a custom domain (staging.example.com) that will point to a specific branch (staging) on your Pages project.
This will allow you to have a custom domain that will always show the latest build for a specific branch on your Pages project.
Currently, this setup is only supported when using Cloudflare DNS.
If you attempt to follow this guide using an external DNS provider, your custom alias will be sent to the production branch of your Pages project.</description></item><item><title>Add custom HTTP headers</title><link>https://panthere2k.github.io/pages/how-to/add-custom-http-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/how-to/add-custom-http-headers/</guid><description>Add custom HTTP headersCloudflare provides HTTP header customization for Pages projects by adding a _headers file to your project. Refer to the documentation for more information. More advanced customization of HTTP headers is available through Cloudflare Workers serverless functions External link icon Open external link .
If you have not deployed a Worker before, get started with our tutorial. For the purpose of this tutorial, accomplish steps one (Sign up for a Workers account) through four (Generate a new project) before returning to this page.</description></item><item><title>Deploy a static WordPress site</title><link>https://panthere2k.github.io/pages/how-to/deploy-a-wordpress-site/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/how-to/deploy-a-wordpress-site/</guid><description>Deploy a static WordPress site &amp;#8203;​ Overview In this guide, you will use a WordPress plugin, Simply Static External link icon Open external link , to convert your existing WordPress site to a static website deployed with Cloudflare Pages.
&amp;#8203;​ Prerequisites This guide assumes that you are:
The Administrator account on your WordPress site. Able to install WordPress plugins on the site. &amp;#8203;​ Setup To start, install the Simply Static External link icon Open external link plugin to export your WordPress site.</description></item><item><title>Handle redirects with Bulk Redirects</title><link>https://panthere2k.github.io/pages/how-to/use-bulk-redirects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/how-to/use-bulk-redirects/</guid><description>Handle redirects with Bulk RedirectsIn this tutorial, you will learn how to use Bulk Redirects (beta) to handle redirects that surpasses the 1,100 redirect rules limit set by Pages. A _redirects file has a maximum of 2,000 static redirects and 100 dynamic redirects, for a combined total of 2,100 redirects.
The redirects defined in the _redirects file of your build folder can work together with your Bulk Redirects. In case of duplicates, Bulk Redirects will run in front of your Pages project, where your other redirects live.</description></item><item><title>Install private packages</title><link>https://panthere2k.github.io/pages/how-to/npm-private-registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/how-to/npm-private-registry/</guid><description>Install private packagesCloudflare Pages supports custom package registries, allowing you to include private dependencies in your application. While this walkthrough focuses specifically on npm External link icon Open external link , the Node package manager and registry, the same approach can be applied to other registry tools.
You will be be adjusting the environment variables in your Pages project&amp;rsquo;s Settings. An existing website can be modified at any time, but new projects can be initialized with these settings, too.</description></item><item><title>Preview Local Projects with Cloudflare Tunnel</title><link>https://panthere2k.github.io/pages/how-to/preview-with-cloudflare-tunnel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/how-to/preview-with-cloudflare-tunnel/</guid><description>Preview Local Projects with Cloudflare TunnelCloudflare Tunnel runs a lightweight daemon (cloudflared) in your infrastructure that establishes outbound connections (Tunnels) between your origin web server and the Cloudflare edge. In practical terms, you can use Cloudflare Tunnel to allow remote access to services running on your local machine. It is an alternative to popular tools like Ngrok External link icon Open external link , and provides free, long-running tunnels via the TryCloudflare service.</description></item><item><title>Redirecting www to domain apex</title><link>https://panthere2k.github.io/pages/how-to/www-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/how-to/www-redirect/</guid><description>Redirecting www to domain apexIn this guide, you will learn how to redirect the www subdomain to your apex domain (example.com). This is a common question and can be achieved by using Bulk Redirects.
To do this:
Log in to the Cloudflare dashboard External link icon Open external link , and select your account and website. Go to DNS. Create a DNS record for the www subdomain. It must either be an A record with the 192.</description></item><item><title>Refactor a Worker to a Pages Function</title><link>https://panthere2k.github.io/pages/how-to/refactor-a-worker-to-pages-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/how-to/refactor-a-worker-to-pages-functions/</guid><description>Refactor a Worker to a Pages FunctionIn this guide, you will learn how to refactor a Worker made to intake form submissions to a Pages Function that can be hosted on your Cloudflare Pages application. Pages Functions is a serverless function that lives within the same project directory as your application and is deployed with Cloudflare Pages. It enables you to run server-side code that adds dynamic functionality without running a dedicated server.</description></item><item><title>Set build commands per branch</title><link>https://panthere2k.github.io/pages/how-to/build-commands-branches/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/how-to/build-commands-branches/</guid><description>Set build commands per branchThis guide will instruct you how to set build commands on specific branches. You will use the CF_PAGES_BRANCH environment variable to run a script on a specified branch as opposed to your Production branch. This guide assumes that you have a Cloudflare account and a Pages project.
&amp;#8203;​ Set up Create a .sh file in your project directory. You can choose your file&amp;rsquo;s name, but we recommend you name the file build.</description></item><item><title>Use Direct Upload with continuous integration</title><link>https://panthere2k.github.io/pages/how-to/use-direct-upload-with-continuous-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/how-to/use-direct-upload-with-continuous-integration/</guid><description>Use Direct Upload with continuous integrationCloudflare Pages now supports directly uploading prebuilt assets, allowing you to use custom build steps for your applications and deploy to Pages with Wrangler. This guide will teach you how to deploy your application to Pages, using continuous integration.
&amp;#8203;​ Deploy with Wrangler In your project directory, install Wrangler so you can deploy a folder of prebuilt assets by running the following command:
# Publish created project $ CLOUDFLARE_ACCOUNT_ID=&amp;lt;ACCOUNT_ID&amp;gt; npx wrangler pages publish &amp;lt;DIRECTORY&amp;gt; --project-name=&amp;lt;PROJECT_NAME&amp;gt; &amp;#8203;​ Get credentials from Cloudflare &amp;#8203;​ Generate an API Token To generate an API token:</description></item></channel></rss>