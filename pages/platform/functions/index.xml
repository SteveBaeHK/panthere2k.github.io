<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functions on Security365 Docs</title><link>https://panthere2k.github.io/pages/platform/functions/</link><description>Recent content in Functions on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/pages/platform/functions/index.xml" rel="self" type="application/rss+xml"/><item><title>Get started</title><link>https://panthere2k.github.io/pages/platform/functions/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/get-started/</guid><description>Get StartedTo deploy your first Function, you’ll need to create a /functions directory at the root of your project. Writing your Functions files in this directory will automatically generate a Worker with custom functionality at predesignated routes. For example, let’s take the Function:
--- filename: helloworld.js --- export function onRequest(context) { return new Response(&amp;#34;Hello, world!&amp;#34;) } The onRequest handler takes a &amp;ldquo;request context&amp;rdquo; object which we&amp;rsquo;ll cover in more detail below.</description></item><item><title>Routing</title><link>https://panthere2k.github.io/pages/platform/functions/routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/routing/</guid><description>Functions routingFunctions utilize file-based routing, where the directory structure indicates the designated routes that your functions will run on. A directory can also have as many levels as you’d like. For example, say you had the following directory:
|---- … |---- functions |___ index.js |___ helloworld.js |___ howdyworld.js |___ fruits |___ index.js |___ apple.js |___ banana.js Then the following routes will be generated based on the file structure, mapping the URL pattern to the /functions file that will be invoked:</description></item><item><title>API Reference</title><link>https://panthere2k.github.io/pages/platform/functions/api-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/api-reference/</guid><description>API referenceThe following APIs are used within Functions.
&amp;#8203;​ Methods &amp;#8203;​ onRequests onRequest(contextEventContext) Response | Promise&amp;lt;Response&amp;gt; This function will be invoked on all requests no matter the request method onRequestGet(contextEventContext) Response | Promise&amp;lt;Response&amp;gt; This function will be invoked on all GET requests onRequestPost(contextEventContext) Response | Promise&amp;lt;Response&amp;gt; This function will be invoked on all POST requests onRequestPatch(contextEventContext) Response | Promise&amp;lt;Response&amp;gt; This function will be invoked on all PATCH requests onRequestPut(contextEventContext) Response | Promise&amp;lt;Response&amp;gt; This function will be invoked on all PUT requests onRequestDelete(contextEventContext) Response | Promise&amp;lt;Response&amp;gt; This function will be invoked on all DELETE requests onRequestHead(contextEventContext) Response | Promise&amp;lt;Response&amp;gt; This function will be invoked on all HEAD requests onRequestOptions(contextEventContext) Response | Promise&amp;lt;Response&amp;gt; This function will be invoked on all OPTIONS requests &amp;#8203;​ env.</description></item><item><title>Middleware</title><link>https://panthere2k.github.io/pages/platform/functions/middleware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/middleware/</guid><description>MiddlewareMiddlewares are reusable chunks of logic that can be executed before or after for some section of your application. Middlewares are typically utility functions: error handling, user authentication, and logging are typical candidates for middleware within an application.
&amp;#8203;​ Adding middleware Middleware is similar to standard Functions except they are always defined in a file named _middleware.js. A _middleware.js file exports a Pages Function request handler that will run on requests which would match any sibling and child Pages Functions in the folder structure.</description></item><item><title>Local Development</title><link>https://panthere2k.github.io/pages/platform/functions/local-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/local-development/</guid><description>Local developmentYou can run your entire application locally with our Wrangler Command Line Interface (CLI). To get started with Wrangler, you can install it with the following command:
$ npm install --global wrangler The main command for local development on Pages is wrangler pages dev. This will let you run your Pages application locally which includes serving static assets and running your Functions. If you have a folder of static assets then you can run the following command to start local development:</description></item><item><title>Bindings</title><link>https://panthere2k.github.io/pages/platform/functions/bindings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/bindings/</guid><description>BindingsYou can add a binding to your Pages project which defines how your Function interacts with external resources. A binding is a variable that the Workers runtime provides to your code.
Using bindings, you can integrate with Cloudflare resources such as KV, Durable Objects, R2, and D1. By first creating a resource in its respective dashboard and then configuring your binding in Pages by going to:
Log into the Cloudflare dashboard External link icon Open external link .</description></item><item><title>TypeScript</title><link>https://panthere2k.github.io/pages/platform/functions/typescript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/typescript/</guid><description>TypeScriptPages Functions supports TypeScript. You can author any files in your functions/ directory with a .ts extension instead of a .js extension to start taking advantage of TypeScript.
The runtime types can be added to your project by installing the following:
$ npm install --save-dev typescript @cloudflare/workers-types And then configured by creating a functions/tsconfig.json file:
--- filename: functions/tsconfig.json --- { &amp;#34;compilerOptions&amp;#34;: { &amp;#34;target&amp;#34;: &amp;#34;esnext&amp;#34;, &amp;#34;module&amp;#34;: &amp;#34;esnext&amp;#34;, &amp;#34;lib&amp;#34;: [&amp;#34;esnext&amp;#34;], &amp;#34;types&amp;#34;: [&amp;#34;@cloudflare/workers-types&amp;#34;] } } If you already have a tsconfig.</description></item><item><title>Advanced Mode</title><link>https://panthere2k.github.io/pages/platform/functions/advanced-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/advanced-mode/</guid><description>Advanced modeIn some cases, the built-in file path based routing and middleware system is not desirable for existing applications. You may already have a Worker that is fairly complex and/or would be tedious to splice it up into Pages&amp;rsquo; file-based routing system. For these cases, Pages offers developers the ability to define a _worker.js file in the output directory of your Pages project.
When using a _worker.js file, the entire /functions directory is ignored – this includes its routing and middleware characteristics.</description></item><item><title>Metrics</title><link>https://panthere2k.github.io/pages/platform/functions/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/metrics/</guid><description>MetricsFunctions metrics can help you diagnose issues and understand your workloads by showing performance and usage of your Functions.
&amp;#8203;​ Functions metrics Functions metrics aggregate request data for an individual Pages project. To view your Functions metrics, select Pages &amp;gt; Pages Project &amp;gt; Functions Metrics.
There are three metrics that can help you understand the health of your Function in a given moment: requests success, error metrics and invocation statuses.</description></item><item><title>Debugging and logging</title><link>https://panthere2k.github.io/pages/platform/functions/debugging-and-logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/debugging-and-logging/</guid><description>Debugging &amp;amp; LoggingFor every deployment of your Pages project, you can access the logs of your Functions using the Cloudflare dashboard or the wrangler CLI.
Logs are a powerful debugging tool that can help you test and monitor the behavior of your Pages Functions once they have been deployed.
Logs can capture various things, such as:
Successful or failed requests to your Functions Uncaught exceptions thrown by your Functions Custom console.</description></item></channel></rss>