<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pages Plugins on Security365 Docs</title><link>https://panthere2k.github.io/pages/platform/functions/plugins/</link><description>Recent content in Pages Plugins on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/pages/platform/functions/plugins/index.xml" rel="self" type="application/rss+xml"/><item><title>Cloudflare Access</title><link>https://panthere2k.github.io/pages/platform/functions/plugins/cloudflare-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/plugins/cloudflare-access/</guid><description>Cloudflare Access Pages PluginThe Cloudflare Access Pages Plugin is a middleware to validate Cloudflare Access JWT assertions. It also includes an API to lookup additional information about a given user&amp;rsquo;s JWT.
&amp;#8203;​ Installation $ npm install @cloudflare/pages-plugin-cloudflare-access &amp;#8203;​ Usage --- filename: functions/_middleware.ts --- import cloudflareAccessPlugin from &amp;#34;@cloudflare/pages-plugin-cloudflare-access&amp;#34;; export const onRequest: PagesFunction = cloudflareAccessPlugin({ domain: &amp;#34;https://test.cloudflareaccess.com&amp;#34;, aud: &amp;#34;4714c1358e65fe4b408ad6d432a5f878f08194bdb4752441fd56faefa9b2b6f2&amp;#34;, }); The Plugin takes an object with two properties: the domain of your Cloudflare Access account, and the policy aud (audience) to validate against.</description></item><item><title>Google Chat</title><link>https://panthere2k.github.io/pages/platform/functions/plugins/google-chat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/plugins/google-chat/</guid><description>Google Chat Pages PluginThe Google Chat Pages Plugin creates a Google Chat bot which can respond to messages. It also includes an API for interacting with Google Chat (for example, for creating messages) without the need for user input. This API is useful for situations such as alerts.
&amp;#8203;​ Installation $ npm install @cloudflare/pages-plugin-google-chat &amp;#8203;​ Usage --- filename: functions/google-chat.ts --- import googleChatPlugin from &amp;#34;@cloudflare/pages-plugin-google-chat&amp;#34;; export const onRequest: PagesFunction = googleChatPlugin(async (message) =&amp;gt; { if (message.</description></item><item><title>GraphQL</title><link>https://panthere2k.github.io/pages/platform/functions/plugins/graphql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/plugins/graphql/</guid><description>GraphQL Pages PluginThe GraphQL Pages Plugin creates a GraphQL server which can respond to application/json and application/graphql POST requests. It responds with the GraphQL Playground External link icon Open external link for GET requests.
&amp;#8203;​ Installation $ npm install @cloudflare/pages-plugin-graphql &amp;#8203;​ Usage --- filename: functions/graphql.ts --- import graphQLPlugin from &amp;#34;@cloudflare/pages-plugin-graphql&amp;#34;; import { graphql, GraphQLSchema, GraphQLObjectType, GraphQLString, } from &amp;#34;graphql&amp;#34;; const schema = new GraphQLSchema({ query: new GraphQLObjectType({ name: &amp;#34;RootQueryType&amp;#34;, fields: { hello: { type: GraphQLString, resolve() { return &amp;#34;Hello, world!</description></item><item><title>hCaptcha</title><link>https://panthere2k.github.io/pages/platform/functions/plugins/hcaptcha/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/plugins/hcaptcha/</guid><description>hCaptcha Pages PluginThe hCaptcha Pages Plugin validates hCaptcha tokens.
&amp;#8203;​ Installation $ npm install @cloudflare/pages-plugin-hcaptcha &amp;#8203;​ Usage --- filename: functions/register.ts --- import hCaptchaPlugin from &amp;#34;@cloudflare/pages-plugin-hcaptcha&amp;#34;; export const onRequestPost: PagesFunction[] = [ hCaptchaPlugin({ secret: &amp;#34;0x0000000000000000000000000000000000000000&amp;#34;, sitekey: &amp;#34;10000000-ffff-ffff-ffff-000000000001&amp;#34;, }), (async ({ request }) =&amp;gt; { // Request has been validated as coming from a human const formData = await request.formData() // Store user credentials return new Response(&amp;#34;Successfully registered!&amp;#34;) }) ]; This Plugin only exposes a single route.</description></item><item><title>Honeycomb</title><link>https://panthere2k.github.io/pages/platform/functions/plugins/honeycomb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/plugins/honeycomb/</guid><description>Honeycomb Pages PluginThe Honeycomb Pages Plugin automatically sends traces to Honeycomb for analysis and observability.
&amp;#8203;​ Installation $ npm install @cloudflare/pages-plugin-honeycomb &amp;#8203;​ Usage The following usage example uses environment variables you will need to set in your Pages project settings.
--- filename: functions/_middleware.ts --- import honeycombPlugin from &amp;#34;@cloudflare/pages-plugin-honeycomb&amp;#34;; export const onRequest: PagesFunction&amp;lt;{ HONEYCOMB_API_KEY: string HONEYCOMB_DATASET: string }&amp;gt; = (context) =&amp;gt; { return honeycombPlugin({ apiKey: context.env.HONEYCOMB_API_KEY, dataset: context.env.HONEYCOMB_DATASET, })(context); } Alternatively, you can hard-code (not advisable for API key) your settings the following way:</description></item><item><title>MailChannels</title><link>https://panthere2k.github.io/pages/platform/functions/plugins/mailchannels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/plugins/mailchannels/</guid><description>MailChannels Pages PluginThe MailChannels Pages Plugin intercepts all form submissions made which have the data-static-form-name attribute set. It then emails these form submissions using the MailChannels API.
&amp;#8203;​ Installation $ npm install @cloudflare/pages-plugin-mailchannels &amp;#8203;​ Usage --- filename: functions/_middleware.ts --- import mailChannelsPlugin from &amp;#34;@cloudflare/pages-plugin-mailchannels&amp;#34;; export const onRequest: PagesFunction = mailChannelsPlugin({ personalizations: [ { to: [{ name: &amp;#34;ACME Support&amp;#34;, email: &amp;#34;support@example.com&amp;#34; }], }, ], from: { name: &amp;#34;ACME Support&amp;#34;, email: &amp;#34;support@example.com&amp;#34;, }, respondWith: () =&amp;gt; { return new Response( `Thank you for submitting your enquiry.</description></item><item><title>Sentry</title><link>https://panthere2k.github.io/pages/platform/functions/plugins/sentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/plugins/sentry/</guid><description>Sentry Pages PluginThe Sentry Pages Plugin captures and logs all exceptions which occur below it in the execution chain of your Pages Functions. It is therefore recommended that you install this Plugin at the root of your application in functions/_middleware.ts as the very first Plugin.
&amp;#8203;​ Installation $ npm install @cloudflare/pages-plugin-sentry &amp;#8203;​ Usage --- filename: functions/_middleware.ts --- import sentryPlugin from &amp;#34;@cloudflare/pages-plugin-sentry&amp;#34;; export const onRequest: PagesFunction = sentryPlugin({ dsn: &amp;#34;https://sentry.io/welcome/xyz&amp;#34;, }); The Plugin uses Toucan External link icon Open external link .</description></item><item><title>Static Forms</title><link>https://panthere2k.github.io/pages/platform/functions/plugins/static-forms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/plugins/static-forms/</guid><description>Static Forms Pages PluginThe Static Forms Pages Plugin intercepts all form submissions made which have the data-static-form-name attribute set. This allows you to take action on these form submissions by, for example, saving the submission to KV.
&amp;#8203;​ Installation $ npm install @cloudflare/pages-plugin-static-forms &amp;#8203;​ Usage --- filename: functions/_middleware.ts --- import staticFormsPlugin from &amp;#34;@cloudflare/pages-plugin-static-forms&amp;#34;; export const onRequest: PagesFunction = staticFormsPlugin({ respondWith: ({ formData, name }) =&amp;gt; { const email = formData.</description></item><item><title>Stytch</title><link>https://panthere2k.github.io/pages/platform/functions/plugins/stytch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/plugins/stytch/</guid><description>Stytch Pages PluginThe Stytch Pages Plugin is a middleware which validates all requests and their session_token.
&amp;#8203;​ Installation $ npm install @cloudflare/pages-plugin-stytch &amp;#8203;​ Usage --- filename: functions/_middleware.ts --- import stytchPlugin from &amp;#34;@cloudflare/pages-plugin-stytch&amp;#34;; import { envs } from &amp;#34;@cloudflare/pages-plugin-stytch/api&amp;#34;; export const onRequest: PagesFunction = stytchPlugin({ project_id: &amp;#34;YOUR_STYTCH_PROJECT_ID&amp;#34;, secret: &amp;#34;YOUR_STYTCH_PROJECT_SECRET&amp;#34;, env: envs.live }); We recommend storing your secret in KV rather than in plain text as above.
The Stytch Plugin takes a single argument, an object with several properties.</description></item><item><title>Community Plugins</title><link>https://panthere2k.github.io/pages/platform/functions/plugins/community-plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/pages/platform/functions/plugins/community-plugins/</guid><description>Community Pages PluginsThe following are some of the community-maintained Pages Plugins. If you have created a Pages Plugin and would like to share it with developers, create a PR to add it to this alphabeticallly-ordered list using the link in the footer.
pages-plugin-asset-negotiation External link icon Open external link Given a folder of assets in multiple formats, this Plugin will automatically negotiate with a client to serve an optimized version of a requested asset.</description></item></channel></rss>