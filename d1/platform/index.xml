<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Platform on Security365 Docs</title><link>https://panthere2k.github.io/d1/platform/</link><description>Recent content in Platform on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/d1/platform/index.xml" rel="self" type="application/rss+xml"/><item><title>Community projects</title><link>https://panthere2k.github.io/d1/platform/community-projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/d1/platform/community-projects/</guid><description>Community projectsDuring D1&amp;rsquo;s alpha period, members of the Cloudflare developer community have made some valuable contributions to the D1 ecosystem. Below are some useful projects to use throughout development.
Community projects are not maintained by the Cloudflare D1 team. They are managed and updated by the project authors. &amp;#8203;​ Projects &amp;#8203;​ d1-orm An Object Relational Mapping (ORM) is a way for you to query and manipulate data by using JavaScript.</description></item><item><title>D1 client API</title><link>https://panthere2k.github.io/d1/platform/client-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/d1/platform/client-api/</guid><description>D1 client API &amp;#8203;​ Prepared and static statements As part of our Client API, both static and prepared statements are supported. Best practice is to use prepared statements which are precompiled objects used by the database to run the SQL. This is because prepared statements lead to overall faster execution and prevent SQL injection attacks.
Below is an example of a prepared statement:
const stmt = db.prepare(&amp;#39;SELECT * FROM users WHERE name = ?</description></item><item><title>Environments</title><link>https://panthere2k.github.io/d1/platform/environments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/d1/platform/environments/</guid><description>EnvironmentsEnvironments are different contexts that your code runs in. The Cloudflare developer platform allows you to create and manage different environments. Through environments, you can deploy the same project to multiple places under multiple names.
To specify different D1 databases for different environments, use the following syntax in your wrangler.toml file:
# This is a staging environment [env.staging] d1_databases = [ { binding = &amp;#34;&amp;lt;BINDING_NAME_1&amp;gt;&amp;#34;, database_name = &amp;#34;&amp;lt;DATABASE_NAME_1&amp;gt;&amp;#34;, database_id = &amp;#34;&amp;lt;UUID1&amp;gt;&amp;#34; }, ] # This is a production environment [env.</description></item><item><title>Limits</title><link>https://panthere2k.github.io/d1/platform/limits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/d1/platform/limits/</guid><description>LimitsWhile D1 is in Alpha, there are some limits to be aware of prior to begin testing.
Database size: You can have a max database size of 100 MB. There are no limitations on rows and columns as long as your database falls within the size limitation. Databases per account: Create up to 10 D1 databases on a single account. If you need more, reach out to the team. Backups: Backups run every hour automatically.</description></item><item><title>Migrations</title><link>https://panthere2k.github.io/d1/platform/migrations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/d1/platform/migrations/</guid><description>MigrationsDatabase migrations are a way of versioning your database. Each migration is stored as an .sql file in your migrations folder. The migrations folder is created in your project directory when you create your first migration. This enables you to store and track changes throughout database development.
&amp;#8203;​ Features Currently, the migrations system aims to be simple yet effective. With the current implementation, you can:
Create an empty migration file.</description></item><item><title>Pricing</title><link>https://panthere2k.github.io/d1/platform/pricing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/d1/platform/pricing/</guid><description>PricingD1 does not charge for egress operations. In the future, you can expect pricing to reflect other Cloudflare storage products where you will only be charged for base storage plus any database operations performed.
While in Alpha, D1 will be free for all users to test and experiment with.</description></item><item><title>Wrangler commands</title><link>https://panthere2k.github.io/d1/platform/wrangler-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/d1/platform/wrangler-commands/</guid><description>Supported Wrangler commandsYou can interact with D1 through Wrangler commands. Refer to the list below for commands that are currently supported.
Command Description wrangler d1 create &amp;lt;database-name&amp;gt; Creates a new D1 database and provides the binding and UUID that you will put in your wrangler.toml file. wrangler d1 list List all D1 databases on your account. wrangler d1 delete &amp;lt;DATABASE_NAME&amp;gt; Delete a D1 database from your account. wrangler d1 execute &amp;lt;DATABASE_NAME&amp;gt; --command &amp;quot;&amp;lt;SQL_QUERY&amp;gt;&amp;quot; Execute query on database.</description></item></channel></rss>