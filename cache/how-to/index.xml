<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>How to on Security365 Docs</title><link>https://panthere2k.github.io/cache/how-to/</link><description>Recent content in How to on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/cache/how-to/index.xml" rel="self" type="application/rss+xml"/><item><title>Configure cache by status code</title><link>https://panthere2k.github.io/cache/how-to/configure-cache-status-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/cache/how-to/configure-cache-status-code/</guid><description>Configure cache by status codeEnterprise customers can set cache time-to-live (TTL) based on the response status from the origin web server. Cache TTL refers to the duration of a resource in the Cloudflare network before being marked as stale or discarded from cache. Status codes are returned by a resource’s origin.
Setting cache TTL based on response status overrides the default cache behavior (standard caching) for static files and overrides cache instructions sent by the origin web server.</description></item><item><title>Create custom cache keys</title><link>https://panthere2k.github.io/cache/how-to/create-cache-keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/cache/how-to/create-cache-keys/</guid><description>Create custom cache keysA Cache Key is an identifier that Cloudflare uses for a file in our cache, and the Cache Key Template defines the identifier for a given HTTP request.
Log in to your Cloudflare account. Select the domain that requires changes to the Cache Key Template. Click the Rules &amp;gt; Page Rules. Click Create Page Rule. Under If the URL matches, enter the URL to match. Under Then the settings are, choose Custom Cache Key from the dropdown.</description></item><item><title>Create Edge Cache TTL page rules</title><link>https://panthere2k.github.io/cache/how-to/create-page-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/cache/how-to/create-page-rules/</guid><description>Create Edge Cache TTL page rules &amp;#8203;​ Get Started Before you begin, you should understand two basic page rule behaviors:
Only the highest priority matching page rule takes effect on a request. Page rules are prioritized in descending order in the Cloudflare dashboard, with the highest priority rule at the top. Cloudflare recommends ordering your rules from most specific to least specific.
&amp;#8203;​ Page Rules Explained A page rule matches a URL pattern based on the following format (comprised of five segments): &amp;lt;scheme&amp;gt;://&amp;lt;hostname&amp;gt;&amp;lt;:port&amp;gt;/&amp;lt;path&amp;gt;?</description></item><item><title>Enable Always Online</title><link>https://panthere2k.github.io/cache/how-to/enable-always-online/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/cache/how-to/enable-always-online/</guid><description>Enable Always OnlineHere is how to enable Always Online in the dashboard:
Log in to your Cloudflare account. Choose the domain that will use Always Online with Internet Archive integration. Click the Caching &amp;gt; Configuration. Under Always Online, set the toggle to On. NoteWhen turning on Always Online, you are also enabling the Internet Archive integration. For best practices and limitations for Always Online, refer to Always Online Best Practices.</description></item><item><title>Enable Cache Deception Armor</title><link>https://panthere2k.github.io/cache/how-to/enable-cache-deception-armor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/cache/how-to/enable-cache-deception-armor/</guid><description>Enable Cache Deception ArmorBefore enabling Cache Deception Armor, please refer to Cache Deception Armor to learn about how Cache Deception Armor and Cache Deception attacks work.
To enable Cache Deception Armor, you need to start by creating a Page Rule. Follow the steps bellow for guidance:
Log in to your Cloudflare dashboard External link icon Open external link and select your domain. Click Rules. From the Page Rules tab, click Create Page Rule.</description></item><item><title>Enable Crawler Hints</title><link>https://panthere2k.github.io/cache/how-to/enable-crawler-hints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/cache/how-to/enable-crawler-hints/</guid><description>Enable Crawler Hints Log in to your Cloudflare dashboard External link icon Open external link and select your domain. Click Caching &amp;gt; Configuration. From Configuration under Crawler Hints, toggle the button to enabled. After enabling Crawler Hints, Cloudflare will begin sending hints to search engines about when they should crawl particular parts of your website.</description></item><item><title>Enable HTTP/2 to Origin</title><link>https://panthere2k.github.io/cache/how-to/enable-http2-to-origin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/cache/how-to/enable-http2-to-origin/</guid><description>Enable HTTP/2 to OriginA protocol is a set of rules governing the exchange or transmission of data between devices. One of the most important protocols that run on the human-computer interaction layer, where applications can access the network services, is HTTP (Hypertext Transfer Protocol).
HTTP is a well established protocol that has several versions, and each version adds features that improve performance over the older one. HTTP/1.1 and HTTP/2 are widely deployed on the Internet today.</description></item><item><title>Enable Tiered Cache</title><link>https://panthere2k.github.io/cache/how-to/enable-tiered-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/cache/how-to/enable-tiered-cache/</guid><description>Enable Tiered Cache Log in to your Cloudflare dashboard External link icon Open external link and select your domain. Click Caching &amp;gt; Tiered Cache. From Argo Tiered Cache, toggle the button to enabled. After enabling Tiered Cache, you are automatically enrolled in Smart Tiered Cache.
&amp;#8203;​ Smart Tiered Cache Smart Tiered Cache dynamically selects the single best upper tier for each of your website’s origins with no configuration required, using our in-house performance and routing data.</description></item><item><title>Enable vary for images</title><link>https://panthere2k.github.io/cache/how-to/enable-vary-for-images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/cache/how-to/enable-vary-for-images/</guid><description>Enable vary for imagesVary for Images is enabled through Cloudflare’s API by creating a variants rule. In the examples below, learn how to serve JPEG, WebP, and AVIF variants for .jpeg and .jpg extensions.
&amp;#8203;​ Create a variants rule curl -X PATCH &amp;#34;https://api.cloudflare.com/client/v4/zones/023e105f4ecef8ad9ca31a8372d0 c353/cache/variants&amp;#34; \ -H &amp;#34;X-Auth-Email: user@example.com&amp;#34; \ -H &amp;#34;X-Auth-Key: 3xamp1ek3y1234&amp;#34; \ -H &amp;#34;Content-Type: application/json&amp;#34; \ --data &amp;#39;{&amp;#34;value&amp;#34;:{&amp;#34;jpeg&amp;#34;:[&amp;#34;image/webp&amp;#34;,&amp;#34;image/avif&amp;#34;],&amp;#34;jpg&amp;#34;:[&amp;#34;image/webp&amp;#34;,&amp;#34;image/avif&amp;#34;]}}&amp;#39; &amp;#8203;​ Modify to only allow WebP variants curl -X PATCH &amp;#34;https://api.</description></item><item><title>Interact with Cache in Workers</title><link>https://panthere2k.github.io/cache/how-to/interact-with-workers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/cache/how-to/interact-with-workers/</guid><description>Interact with Cache in WorkersYou can use Workers to customize cache behavior on Cloudflare&amp;rsquo;s CDN. Because Cloudflare’s Workers can run before and after the cache, you can utilize Workers to modify assets after they are returned from the cache, to sign or personalize responses while reducing load on an origin, or reduce latency to the end user by serving assets from a nearby location.
To determine how to cache a resource by setting TTLs, custom cache keys, and cache headers in a fetch request, refer to Cache using fetch.</description></item></channel></rss>