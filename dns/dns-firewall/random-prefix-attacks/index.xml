<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Random prefix attack mitigation on Security365 Docs</title><link>https://panthere2k.github.io/dns/dns-firewall/random-prefix-attacks/</link><description>Recent content in Random prefix attack mitigation on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/dns/dns-firewall/random-prefix-attacks/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://panthere2k.github.io/dns/dns-firewall/random-prefix-attacks/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/dns/dns-firewall/random-prefix-attacks/about/</guid><description>About random prefix attacksRandom prefix attacks are when someone sends a lot of traffic to subdomains that are highly unlikely to exist (12345.example.com, abcdefg.example.com), but are still associated with your main domain (example.com).
Usually, a DNS query to each random subdomain (or prefix) is not repeated, so it cannot be cached by resolvers or any other proxies and always reaches the authoritative nameservers. Rate limiting or blocking queries based on source IP can introduce a high amount of false positives, since random prefix attacks commonly are conducted via public resolvers.</description></item><item><title>Setup</title><link>https://panthere2k.github.io/dns/dns-firewall/random-prefix-attacks/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/dns/dns-firewall/random-prefix-attacks/setup/</guid><description>Protect against random prefix attacksIn order to enable automatic mitigation of random prefix attacks:
Set up DNS Firewall.
Send a PATCH request to update your DNS Firewall cluster.
curl -X PATCH &amp;#34;https://api.cloudflare.com/client/v4/accounts/&amp;lt;ACCOUNT_ID&amp;gt;/dns_firewall/&amp;lt;CLUSTER_TAG&amp;gt;&amp;#34; \ -H &amp;#34;Authorization: Bearer &amp;lt;token&amp;gt;&amp;#34; \ -H &amp;#34;Content-Type: application/json&amp;#34; \ --data &amp;#39;{&amp;#34;attack_mitigation&amp;#34;:{ &amp;#34;enabled&amp;#34;:true, &amp;#34;only_when_origin_unhealthy&amp;#34;:true } }&amp;#39; Once you receive a 200 success response from the API, queries identified as being part of a random prefix attack will receive a REFUSED response.</description></item></channel></rss>