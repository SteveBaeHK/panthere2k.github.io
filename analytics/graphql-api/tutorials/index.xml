<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on Security365 Docs</title><link>https://panthere2k.github.io/analytics/graphql-api/tutorials/</link><description>Recent content in Tutorials on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/analytics/graphql-api/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Build your own Analytics dashboard</title><link>https://panthere2k.github.io/analytics/graphql-api/tutorials/build-your-own-analytics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/analytics/graphql-api/tutorials/build-your-own-analytics/</guid><description>Build your own Analytics dashboardIn this example, we are going to see how to use the GraphQL Analytics API to build your own dashboard. This tutorial walks you through building a simple line chart for your Cloudflare zone using HTML, JavaScript, AJAX, and chart.js.
The following code will build a page with all the requirements to fetch from GraphQL and plot the cached and uncached bandwidth for the given zone.</description></item><item><title>Use GraphQL to create widgets</title><link>https://panthere2k.github.io/analytics/graphql-api/tutorials/use-graphql-create-widgets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/analytics/graphql-api/tutorials/use-graphql-create-widgets/</guid><description>Use GraphQL to create widgetsThis article presents examples of queries you can use to populate your own dashboard.
Parameters and filters Timeseries graph Activity log Top N cards - source Top N cards - destination TCP Flags Executive summary Use this workflow to build and test queries:
Install and configure the GraphiQL External link icon Open external link app to authenticate to the Cloudflare Analytics GraphQL API. Cloudflare recommends token authentication.</description></item><item><title>Export GraphQL data to CSV</title><link>https://panthere2k.github.io/analytics/graphql-api/tutorials/export-graphql-to-csv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/analytics/graphql-api/tutorials/export-graphql-to-csv/</guid><description>Export GraphQL data to CSVThis tutorial shows how to create a Python script to query the GraphQL API for Network Analytics data and convert the response to comma-separated values (CSV). Produced CSV could be easily ingested by tools like Splunk External link icon Open external link for further visualization and usage.
Therefore, this example queries the ipFlows1mAttacksGroups dataset, which contains minutely aggregates of Network Analytics attack activity.
WarningThis tutorial uses Network Analytics v1 (NAv1) nodes.</description></item><item><title>Querying Access login events with GraphQL</title><link>https://panthere2k.github.io/analytics/graphql-api/tutorials/querying-access-login-events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/analytics/graphql-api/tutorials/querying-access-login-events/</guid><description>Querying Access login events with GraphQLIn this example, we are going to use the GraphQL Analytics API to retrieve logs for an Access login event. These logs are particularly useful for determining why a user received a 403 Forbidden error, since they surface additional data beyond what is shown in the dashboard Access logs.
The following API call will request logs for a single Access login event and output the requested fields.</description></item><item><title>Querying Firewall Events with GraphQL</title><link>https://panthere2k.github.io/analytics/graphql-api/tutorials/querying-firewall-events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/analytics/graphql-api/tutorials/querying-firewall-events/</guid><description>Querying Firewall Events with GraphQLIn this example, we are going to use the GraphQL Analytics API to query for Firewall Events over a specified time period.
The following API call will request Firewall Events over a one hour period, and output the requested fields. Be sure to replace CLOUDFLARE_ZONE_ID, CLOUDFLARE_EMAIL, and CLOUDFLARE_API_KEY with your zone tag and API credentials, and adjust the datetime_geg and datetime_leq values to your liking.</description></item><item><title>Querying HTTP events by hostname with GraphQL</title><link>https://panthere2k.github.io/analytics/graphql-api/tutorials/end-customer-analytics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/analytics/graphql-api/tutorials/end-customer-analytics/</guid><description>Querying HTTP events by hostname with GraphQLIn this example, we are going to use the GraphQL Analytics API to to query aggregated metrics about HTTP events by hostname over a specific period of time.
The following API call will request the number of visits and edge response bytes for the custom hostname hostname.example.com over a four day period. Be sure to replace CLOUDFLARE_ZONE_ID AND CLOUDFLARE_API_TOKEN with your zone ID and API credentials, and adjust the datetime_geq and datetime_leq values as needed.</description></item><item><title>Querying Magic Firewall Samples with GraphQL</title><link>https://panthere2k.github.io/analytics/graphql-api/tutorials/querying-magic-firewall-samples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/analytics/graphql-api/tutorials/querying-magic-firewall-samples/</guid><description>Querying Magic Firewall Samples with GraphQLIn this example, we are going to use the GraphQL Analytics API to query for Magic Firewall Samples over a specified time period.
The following API call will request Magic Firewall Samples over a one hour period, and output the requested fields. Be sure to replace CLOUDFLARE_ACCOUNT_ID, CLOUDFLARE_EMAIL, and CLOUDFLARE_API_KEY with your zone tag and API credentials, and adjust the datetime_geg and datetime_leq values to your liking.</description></item><item><title>Querying Magic Transit tunnel bandwidth analytics with GraphQL</title><link>https://panthere2k.github.io/analytics/graphql-api/tutorials/querying-magic-transit-tunnel-bandwidth-analytics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/analytics/graphql-api/tutorials/querying-magic-transit-tunnel-bandwidth-analytics/</guid><description>Querying Magic Transit tunnel bandwidth analytics with GraphQLIn this example, you are going to use the GraphQL Analytics API to query Magic Transit Ingress Tunnel Traffic over a specified time period.
The following API call will request Magic Transit Ingress Tunnel Traffic over a one-hour period and output the requested fields. Be sure to replace CLOUDFLARE_ACCOUNT_ID, CLOUDFLARE_EMAIL, and CLOUDFLARE_API_KEY with your email and API credentials, and adjust the datetime_geq and datetime_leq values as needed.</description></item><item><title>Querying Magic Transit Tunnel Health Check Results with GraphQL</title><link>https://panthere2k.github.io/analytics/graphql-api/tutorials/querying-magic-transit-tunnel-healthcheck-results/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/analytics/graphql-api/tutorials/querying-magic-transit-tunnel-healthcheck-results/</guid><description>Querying Magic Transit Tunnel Health Check Results with GraphQLIn this example, you are going to use the GraphQL Analytics API to query Magic Transit Health check results which are aggregated from individual health checks carried out by Cloudflare servers to GRE tunnels you have set up to work with Magic Transit during the onboarding process. You can query up to one week of data for dates up to three months ago.</description></item><item><title>Querying Workers Metrics with GraphQL</title><link>https://panthere2k.github.io/analytics/graphql-api/tutorials/querying-workers-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/analytics/graphql-api/tutorials/querying-workers-metrics/</guid><description>Querying Workers Metrics with GraphQLIn this example, we are going to use the GraphQL Analytics API to query for Workers Metrics over a specified time period. We can query up to one week of data for dates up to three months ago.
The following API call will request a Worker script&amp;rsquo;s metrics over a one day period, and output the requested fields. Be sure to replace CLOUDFLARE_ACCOUNT_ID, CLOUDFLARE_EMAIL, and CLOUDFLARE_API_KEY with your API credentials, and adjust the datetimeStart, datetimeEnd, and scriptName variables as needed.</description></item></channel></rss>