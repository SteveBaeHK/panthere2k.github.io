<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cryptographic Background on Security365 Docs</title><link>https://panthere2k.github.io/randomness-beacon/cryptographic-background/</link><description>Recent content in Cryptographic Background on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/randomness-beacon/cryptographic-background/index.xml" rel="self" type="application/rss+xml"/><item><title>Setup Phase</title><link>https://panthere2k.github.io/randomness-beacon/cryptographic-background/setup-phase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/randomness-beacon/cryptographic-background/setup-phase/</guid><description>Setup PhaseIn the drand setup phase, you create a collective private and public key pair shared among 𝑛 participants. This is done through a 𝑡-of-𝑛 Distributed Key Generation (DKG) process and results in each participant receiving a copy of the collective public key plus a private key share of the collective private key — no individual node knows the collective private key. Each private key share can then be used to perform cryptographic threshold computations, such as generating threshold signatures, where at least 𝑡 contributions produced using the individual private key shares are required to successfully finish the collective operation.</description></item><item><title>Randomness Generation</title><link>https://panthere2k.github.io/randomness-beacon/cryptographic-background/randomness-generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/randomness-beacon/cryptographic-background/randomness-generation/</guid><description>Randomness GenerationIn this section, we describe how to use this collective key pair to generate publicly-verifiable, unbiasable, and unpredictable randomness in a distributed manner.
First, we explain pairing-based cryptography (PBC), which has become quite popular, and is used in many modern consensus protocols or zero-knowledge proofs, such as zk-SNARKs. We will then show how drand uses PBC for the randomness beacon generation phase for threshold Boneh-Lynn-Shacham (BLS) signatures. Finally, we will discuss how drand links the generated threshold BLS signatures into a randomness chain.</description></item></channel></rss>