<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Common use cases on Security365 Docs</title><link>https://panthere2k.github.io/firewall/recipes/</link><description>Recent content in Common use cases on Security365 Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://panthere2k.github.io/firewall/recipes/index.xml" rel="self" type="application/rss+xml"/><item><title>Block Microsoft Exchange Autodiscover requests</title><link>https://panthere2k.github.io/firewall/recipes/block-ms-exchange-autodiscover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/firewall/recipes/block-ms-exchange-autodiscover/</guid><description> Block Microsoft Exchange Autodiscover requestsIn some cases, Microsoft Exchange Autodiscover service requests can be “noisy,” triggering large numbers of HTTP 404 (Page not found) errors.
This example uses the matches comparison operator and a regular expression to block autodiscover.xml and autodiscover.src requests:
Expression Action http.request.uri.path matches "/autodiscover.(xml|src)$" Block</description></item><item><title>Block requests by Threat Score</title><link>https://panthere2k.github.io/firewall/recipes/block-ip-reputation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/firewall/recipes/block-ip-reputation/</guid><description>Block requests by Threat ScoreA powerful feature of firewall rules is its support for Cloudflare’s Threat Score, which ranks requests based on IP reputation. The cf.threat_score field can contain a score from 0 to 100. These scores are collected from Project Honeypot External link icon Open external link .
This example blocks requests based on country code ( ISO 3166-1 Alpha 2 External link icon Open external link format), from IP addresses that score greater than 0.</description></item><item><title>Challenge bad bots</title><link>https://panthere2k.github.io/firewall/recipes/challenge-bad-bots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/firewall/recipes/challenge-bad-bots/</guid><description>Challenge bad botsCloudflare’s Bot Management feature scores the likelihood that a request originates from a bot.
Access to Bot Management requires a Cloudflare Enterprise plan with Bot Management enabled. Scores range from 1 through 99. Low scores indicate the request comes from a script, API service, or an automated agent. High scores indicate that a human issued the request from a standard desktop or mobile web browser.
These examples use:</description></item><item><title>Exempt partners from Hotlink Protection</title><link>https://panthere2k.github.io/firewall/recipes/exempt-partners-hotlink-protection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/firewall/recipes/exempt-partners-hotlink-protection/</guid><description>Exempt partners from Hotlink ProtectionWhen enabled, Cloudflare Hotlink Protection External link icon Open external link blocks all HTTP referrers that are not part of your domain or zone. That presents a problem if you allow partners to use inline links to your assets.
However, with firewall rules you can maintain hotlink protection while allowing inline links from your partners.
If you use this technique, disable Hotlink Protection within the Scrape Shield app so that partner referrals are not blocked by that feature.</description></item><item><title>Require a specific cookie</title><link>https://panthere2k.github.io/firewall/recipes/require-specific-cookie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/firewall/recipes/require-specific-cookie/</guid><description>Require a specific cookieTo secure a sensitive area such as a development area, you can share a cookie with trusted individuals and then filter requests so that only users with that cookie can access your site.
Use the http.cookie field to target requests based on the presence of a specific cookie.
This example comprises two rules:
The first rule targets requests to dev.www.foo that have a specific cookie key, devaccess.</description></item><item><title>Require a valid HMAC token</title><link>https://panthere2k.github.io/firewall/recipes/require-valid-hmac-token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/firewall/recipes/require-valid-hmac-token/</guid><description>Require a valid HMAC tokenUse the Rules language HMAC validation function to validate hash-based message authentication code (HMAC) tokens in a firewall rule expression.
Access to the HMAC validation function requires a Cloudflare Pro, Business, or Enterprise plan. This example uses HMAC token authentication to protect a static private asset hosted by example.com.
The http.request.uri for this example is
/download/cat.jpg?verify=1484063787-9JQB8vP1z0yc5DEBnH6JGWM3mBmvIeMrnnxFi3WtJLE%3D where
/download/cat.jpg? represents the path to the asset—the HMAC message to authenticate</description></item><item><title>Require specific HTTP headers</title><link>https://panthere2k.github.io/firewall/recipes/require-specific-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/firewall/recipes/require-specific-headers/</guid><description>Require specific HTTP headersMany organizations qualify traffic based on the presence of specific HTTP request headers. Use the Rules language HTTP request header fields to target requests with specific headers.
This example uses the http.headers.names field to look for the presence of an X-CSRF-Token header. The lower() transformation function converts the value to lowercase so that the expression is case insensitive.
When the X-CSRF-Token header is missing, Cloudflare blocks the request:</description></item><item><title>Require specific HTTP ports</title><link>https://panthere2k.github.io/firewall/recipes/require-specific-http-ports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/firewall/recipes/require-specific-http-ports/</guid><description>Require specific HTTP portsBy default, Cloudflare allows requests on a number of different HTTP ports (refer to Network ports.
You can target requests based on their HTTP port with the cf.edge.server_port dynamic field. Use the in comparison operator to target a set of ports.
This example blocks requests to www.example.com that are not on ports 80 or 443:
Expression Action http.host eq "www.example.com" and not cf.edge.server_port in {80 443} Block Alternatively, if you are using WAF managed rules External link icon Open external link (previous version) and you do not need to specify a custom expression, enable rule ID 100015: &amp;ldquo;Anomaly:Port - Non Standard Port (not 80 or 443)&amp;rdquo; to block all requests to your zone on non-standard HTTP ports.</description></item><item><title>Site administration — Require known IP addresses</title><link>https://panthere2k.github.io/firewall/recipes/site-admin-only-known-ips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/firewall/recipes/site-admin-only-known-ips/</guid><description>Site administration — Require known IP addressesIf an attack compromises the administrative area of your website, the consequences can be severe. With firewall rules, you can protect your site’s administrative area by blocking requests for access to administrative paths that do not come from a known IP address.
The example below limits access to the WordPress administrative area, /wp-admin/, by blocking requests that do not originate from a specified set of IP addresses.</description></item><item><title>Stop R-U-Dead-Yet? (R.U.D.Y.) attacks</title><link>https://panthere2k.github.io/firewall/recipes/stop-rudy-attacks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://panthere2k.github.io/firewall/recipes/stop-rudy-attacks/</guid><description>Stop R-U-Dead-Yet? (R.U.D.Y.) attacksR-U-Dead-Yet (R.U.D.Y.) attacks accomplish denial of service (DoS) by submitting long form fields. Use firewall rules to stop these attacks by blocking requests that do not have a legitimate session cookie.
This example combines three expressions to target HTTP POST requests that do not contain a legitimate authenticated session cookie.
The first expression uses the http.request.uri.path field to target the paths to secure from R.U.D.Y.:
http.request.uri.path matches &amp;#34;(comment|conversation|event|poll)/create&amp;#34; The second uses a regular expression to match the format of a legitimate auth_session cookie.</description></item></channel></rss>